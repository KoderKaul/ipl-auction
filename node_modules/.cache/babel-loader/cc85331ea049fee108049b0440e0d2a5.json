{"ast":null,"code":"var _jsxFileName = \"/home/proxin/React/react-js-chat-webapp-example/src/components/JoinRoom/JoinRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Jumbotron, Spinner, ListGroup, ListGroupItem, Button } from \"reactstrap\";\nimport Moment from \"moment\";\nimport firebase from \"../../Firebase\";\n\nfunction JoinRoom() {\n  _s();\n\n  const classes = useStyles();\n  const [room, setRoom] = useState([]);\n  const [showLoading, setShowLoading] = useState(true);\n  const [nickName, setNickName] = useState(\"\");\n  const history = useHistory();\n  useEffect(() => {\n    const fetchData = async () => {\n      setNickName(localStorage.getItem(\"nickName\"));\n      firebase.database().ref(\"rooms/\").on(\"value\", resp => {\n        setRoom([]);\n        setRoom(snapshotToArray(resp));\n        setShowLoading(false);\n      });\n    };\n\n    fetchData();\n  }, []);\n\n  const snapshotToArray = snapshot => {\n    const returnArr = [];\n    snapshot.forEach(childSnapshot => {\n      const item = childSnapshot.val();\n      item.key = childSnapshot.key;\n      returnArr.push(item);\n    });\n    return returnArr;\n  };\n\n  const enterChatRoom = roomname => {\n    const chat = {\n      roomname: \"\",\n      nickName: \"\",\n      message: \"\",\n      date: \"\",\n      type: \"\"\n    };\n    chat.roomname = roomname;\n    chat.nickName = nickName;\n    chat.date = Moment(new Date()).format(\"DD/MM/YYYY HH:mm:ss\");\n    chat.message = `${nickName} enter the room`;\n    chat.type = \"join\";\n    const newMessage = firebase.database().ref(\"chats/\").push();\n    newMessage.set(chat);\n    firebase.database().ref(\"roomusers/\").orderByChild(\"roomname\").equalTo(roomname).on(\"value\", resp => {\n      let roomuser = [];\n      roomuser = snapshotToArray(resp);\n      const user = roomuser.find(x => x.nickName === nickName);\n\n      if (user !== undefined) {\n        const userRef = firebase.database().ref(\"roomusers/\" + user.key);\n        userRef.update({\n          status: \"online\"\n        });\n      } else {\n        const newroomuser = {\n          roomname: \"\",\n          nickname: \"\",\n          status: \"\"\n        };\n        newroomuser.roomname = roomname;\n        newroomuser.nickName = nickName;\n        newroomuser.status = \"online\";\n        const newRoomUser = firebase.database().ref(\"roomusers/\").push();\n        newRoomUser.set(newroomuser);\n      }\n    });\n    history.push(\"/chatroom/\" + roomname);\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"nickName\");\n    history.push(\"/login\");\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.mainContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    component: \"main\",\n    maxWidth: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, \"Welcome to IPL Auction \"), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.innerContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    label: \"Name\",\n    variant: \"outlined\",\n    fullWidth: true,\n    required: true,\n    InputLabelProps: {\n      shrink: true\n    },\n    value: myRoom,\n    onChange: e => {\n      setMyRoom(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: classes.submitButton,\n    color: \"primary\",\n    onClick: handleSubmit,\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, \"Join\"))));\n}\n\n_s(JoinRoom, \"5T0zwAMUX96K5EJBYl/Xgud6bfk=\", true, function () {\n  return [useHistory];\n});\n\n_c = JoinRoom;\nexport default JoinRoom;\n/*\n{room.map((item, idx) => (\n                        <ListGroupItem key={idx} action onClick={() => { enterChatRoom(item.roomname) }}>{item.roomname}</ListGroupItem>\n                    ))}\n                */\n\nvar _c;\n\n$RefreshReg$(_c, \"JoinRoom\");","map":{"version":3,"sources":["/home/proxin/React/react-js-chat-webapp-example/src/components/JoinRoom/JoinRoom.js"],"names":["React","useState","useEffect","Link","useHistory","Jumbotron","Spinner","ListGroup","ListGroupItem","Button","Moment","firebase","JoinRoom","classes","useStyles","room","setRoom","showLoading","setShowLoading","nickName","setNickName","history","fetchData","localStorage","getItem","database","ref","on","resp","snapshotToArray","snapshot","returnArr","forEach","childSnapshot","item","val","key","push","enterChatRoom","roomname","chat","message","date","type","Date","format","newMessage","set","orderByChild","equalTo","roomuser","user","find","x","undefined","userRef","update","status","newroomuser","nickname","newRoomUser","logout","removeItem","mainContainer","innerContainer","shrink","myRoom","e","setMyRoom","target","value","submitButton","handleSubmit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport {\n  Jumbotron,\n  Spinner,\n  ListGroup,\n  ListGroupItem,\n  Button,\n} from \"reactstrap\";\nimport Moment from \"moment\";\nimport firebase from \"../../Firebase\";\n\nfunction JoinRoom() {\n  const classes = useStyles();\n  const [room, setRoom] = useState([]);\n  const [showLoading, setShowLoading] = useState(true);\n  const [nickName, setNickName] = useState(\"\");\n  const history = useHistory();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setNickName(localStorage.getItem(\"nickName\"));\n      firebase\n        .database()\n        .ref(\"rooms/\")\n        .on(\"value\", (resp) => {\n          setRoom([]);\n          setRoom(snapshotToArray(resp));\n          setShowLoading(false);\n        });\n    };\n\n    fetchData();\n  }, []);\n\n  const snapshotToArray = (snapshot) => {\n    const returnArr = [];\n\n    snapshot.forEach((childSnapshot) => {\n      const item = childSnapshot.val();\n      item.key = childSnapshot.key;\n      returnArr.push(item);\n    });\n\n    return returnArr;\n  };\n\n  const enterChatRoom = (roomname) => {\n    const chat = {\n      roomname: \"\",\n      nickName: \"\",\n      message: \"\",\n      date: \"\",\n      type: \"\",\n    };\n    chat.roomname = roomname;\n    chat.nickName = nickName;\n    chat.date = Moment(new Date()).format(\"DD/MM/YYYY HH:mm:ss\");\n    chat.message = `${nickName} enter the room`;\n    chat.type = \"join\";\n    const newMessage = firebase.database().ref(\"chats/\").push();\n    newMessage.set(chat);\n\n    firebase\n      .database()\n      .ref(\"roomusers/\")\n      .orderByChild(\"roomname\")\n      .equalTo(roomname)\n      .on(\"value\", (resp) => {\n        let roomuser = [];\n        roomuser = snapshotToArray(resp);\n        const user = roomuser.find((x) => x.nickName === nickName);\n        if (user !== undefined) {\n          const userRef = firebase.database().ref(\"roomusers/\" + user.key);\n          userRef.update({ status: \"online\" });\n        } else {\n          const newroomuser = { roomname: \"\", nickname: \"\", status: \"\" };\n          newroomuser.roomname = roomname;\n          newroomuser.nickName = nickName;\n          newroomuser.status = \"online\";\n          const newRoomUser = firebase.database().ref(\"roomusers/\").push();\n          newRoomUser.set(newroomuser);\n        }\n      });\n\n    history.push(\"/chatroom/\" + roomname);\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"nickName\");\n    history.push(\"/login\");\n  };\n\n  return (\n    <div className={classes.mainContainer}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <Typography variant=\"h3\">Welcome to IPL Auction </Typography>\n        <div className={classes.innerContainer}>\n          <TextField\n            label=\"Name\"\n            variant=\"outlined\"\n            fullWidth\n            required={true}\n            InputLabelProps={{ shrink: true }}\n            value={myRoom}\n            onChange={(e) => {\n              setMyRoom(e.target.value);\n            }}\n          />\n\n          <Button\n            className={classes.submitButton}\n            color=\"primary\"\n            onClick={handleSubmit}\n            fullWidth\n          >\n            Join\n          </Button>\n        </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default JoinRoom;\n\n/*\n{room.map((item, idx) => (\n                        <ListGroupItem key={idx} action onClick={() => { enterChatRoom(item.roomname) }}>{item.roomname}</ListGroupItem>\n                    ))}\n                */\n"]},"metadata":{},"sourceType":"module"}