{"ast":null,"code":"var _jsxFileName = \"/home/proxin/React/react-js-chat-webapp-example/src/components/RoomList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Jumbotron, Spinner, ListGroup, ListGroupItem, Button } from 'reactstrap';\nimport Moment from 'moment';\nimport firebase from '../Firebase';\n\nfunction RoomList() {\n  _s();\n\n  const [room, setRoom] = useState([]);\n  const [showLoading, setShowLoading] = useState(true);\n  const [nickName, setickName] = useState('');\n  const history = useHistory();\n  useEffect(() => {\n    const fetchData = async () => {\n      setNickname(localStorage.getItem('nickName'));\n      firebase.database().ref('rooms/').on('value', resp => {\n        setRoom([]);\n        setRoom(snapshotToArray(resp));\n        setShowLoading(false);\n      });\n    };\n\n    fetchData();\n  }, []);\n\n  const snapshotToArray = snapshot => {\n    const returnArr = [];\n    snapshot.forEach(childSnapshot => {\n      const item = childSnapshot.val();\n      item.key = childSnapshot.key;\n      returnArr.push(item);\n    });\n    return returnArr;\n  };\n\n  const enterChatRoom = roomname => {\n    const chat = {\n      roomname: '',\n      nickname: '',\n      message: '',\n      date: '',\n      type: ''\n    };\n    chat.roomname = roomname;\n    chat.nickname = nickname;\n    chat.date = Moment(new Date()).format('DD/MM/YYYY HH:mm:ss');\n    chat.message = `${nickname} enter the room`;\n    chat.type = 'join';\n    const newMessage = firebase.database().ref('chats/').push();\n    newMessage.set(chat);\n    firebase.database().ref('roomusers/').orderByChild('roomname').equalTo(roomname).on('value', resp => {\n      let roomuser = [];\n      roomuser = snapshotToArray(resp);\n      const user = roomuser.find(x => x.nickname === nickname);\n\n      if (user !== undefined) {\n        const userRef = firebase.database().ref('roomusers/' + user.key);\n        userRef.update({\n          status: 'online'\n        });\n      } else {\n        const newroomuser = {\n          roomname: '',\n          nickname: '',\n          status: ''\n        };\n        newroomuser.roomname = roomname;\n        newroomuser.nickname = nickname;\n        newroomuser.status = 'online';\n        const newRoomUser = firebase.database().ref('roomusers/').push();\n        newRoomUser.set(newroomuser);\n      }\n    });\n    history.push('/chatroom/' + roomname);\n  };\n\n  const logout = () => {\n    localStorage.removeItem('nickname');\n    history.push('/login');\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, showLoading && /*#__PURE__*/React.createElement(Spinner, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }, nickname, \" \", /*#__PURE__*/React.createElement(Button, {\n    onClick: () => {\n      logout();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 32\n    }\n  }, \"Logout\")), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, \"Room List\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/addroom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }, \"Add Room\")), /*#__PURE__*/React.createElement(ListGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, room.map((item, idx) => /*#__PURE__*/React.createElement(ListGroupItem, {\n    key: idx,\n    action: true,\n    onClick: () => {\n      enterChatRoom(item.roomname);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 25\n    }\n  }, item.roomname)))));\n}\n\n_s(RoomList, \"xEiDqhQTqICKj9rNAO2yyfFVvpQ=\", false, function () {\n  return [useHistory];\n});\n\n_c = RoomList;\nexport default RoomList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RoomList\");","map":{"version":3,"sources":["/home/proxin/React/react-js-chat-webapp-example/src/components/RoomList.js"],"names":["React","useState","useEffect","Link","useHistory","Jumbotron","Spinner","ListGroup","ListGroupItem","Button","Moment","firebase","RoomList","room","setRoom","showLoading","setShowLoading","nickName","setickName","history","fetchData","setNickname","localStorage","getItem","database","ref","on","resp","snapshotToArray","snapshot","returnArr","forEach","childSnapshot","item","val","key","push","enterChatRoom","roomname","chat","nickname","message","date","type","Date","format","newMessage","set","orderByChild","equalTo","roomuser","user","find","x","undefined","userRef","update","status","newroomuser","newRoomUser","logout","removeItem","map","idx"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    Link,\n    useHistory\n  } from \"react-router-dom\";\nimport {\n    Jumbotron,\n    Spinner,\n    ListGroup,\n    ListGroupItem,\n    Button\n} from 'reactstrap';\nimport Moment from 'moment';\nimport firebase from '../Firebase';\n\nfunction RoomList() {\n    const [room, setRoom] = useState([]);\n    const [showLoading, setShowLoading] = useState(true);\n    const [nickName, setickName] = useState('');\n    const history = useHistory();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            setNickname(localStorage.getItem('nickName'));\n            firebase.database().ref('rooms/').on('value', resp => {\n                setRoom([]);\n                setRoom(snapshotToArray(resp));\n                setShowLoading(false);\n            });\n        };\n      \n        fetchData();\n    }, []);\n\n    const snapshotToArray = (snapshot) => {\n        const returnArr = [];\n\n        snapshot.forEach((childSnapshot) => {\n            const item = childSnapshot.val();\n            item.key = childSnapshot.key;\n            returnArr.push(item);\n        });\n\n        return returnArr;\n    }\n\n    const enterChatRoom = (roomname) => {\n        const chat = { roomname: '', nickname: '', message: '', date: '', type: '' };\n        chat.roomname = roomname;\n        chat.nickname = nickname;\n        chat.date = Moment(new Date()).format('DD/MM/YYYY HH:mm:ss');\n        chat.message = `${nickname} enter the room`;\n        chat.type = 'join';\n        const newMessage = firebase.database().ref('chats/').push();\n        newMessage.set(chat);\n\n        firebase.database().ref('roomusers/').orderByChild('roomname').equalTo(roomname).on('value', (resp) => {\n            let roomuser = [];\n            roomuser = snapshotToArray(resp);\n            const user = roomuser.find(x => x.nickname === nickname);\n            if (user !== undefined) {\n              const userRef = firebase.database().ref('roomusers/' + user.key);\n              userRef.update({status: 'online'});\n            } else {\n              const newroomuser = { roomname: '', nickname: '', status: '' };\n              newroomuser.roomname = roomname;\n              newroomuser.nickname = nickname;\n              newroomuser.status = 'online';\n              const newRoomUser = firebase.database().ref('roomusers/').push();\n              newRoomUser.set(newroomuser);\n            }\n        });\n    \n        history.push('/chatroom/' + roomname);\n    }\n\n    const logout = () => {\n        localStorage.removeItem('nickname');\n        history.push('/login');\n    }\n\n    return (\n        <div>\n            {showLoading &&\n                <Spinner color=\"primary\" />\n            }\n            <Jumbotron>\n                <h3>{nickname} <Button onClick={() => { logout() }}>Logout</Button></h3>\n                <h2>Room List</h2>\n                <div>\n                    <Link to=\"/addroom\">Add Room</Link>\n                </div>\n                <ListGroup>\n                    {room.map((item, idx) => (\n                        <ListGroupItem key={idx} action onClick={() => { enterChatRoom(item.roomname) }}>{item.roomname}</ListGroupItem>\n                    ))}\n                </ListGroup>\n            </Jumbotron>\n        </div>\n    );\n}\n\nexport default RoomList;"]},"metadata":{},"sourceType":"module"}