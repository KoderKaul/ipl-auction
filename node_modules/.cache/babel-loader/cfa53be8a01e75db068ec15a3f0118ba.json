{"ast":null,"code":"var _jsxFileName = \"/home/proxin/React/react-js-chat-webapp-example/src/components/MainScreen/ChatRoom/ChatRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { Players } from \"../../../Players\";\nimport { Typography, TextField, IconButton, CircularProgress, Container, Paper, Grid, AppBar, Toolbar, Button } from \"@material-ui/core\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport { Row, Col, Card, CardBody, CardSubtitle, Form, InputGroup, Input, InputGroupAddon } from \"reactstrap\";\nimport Moment from \"moment\";\nimport firebase from \"../../../Firebase\";\nimport ScrollToBottom from \"react-scroll-to-bottom\";\nimport SendIcon from '@material-ui/icons/Send';\nimport useStyles from \"./ChatRoom.styles\";\nimport '../../../Styles.css';\n\nfunction ChatRoom() {\n  _s();\n\n  const classes = useStyles();\n  const [chats, setChats] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [nickname, setNickname] = useState(\"\");\n  const [roomname, setRoomname] = useState(\"\");\n  const [newchat, setNewchat] = useState({\n    roomname: \"\",\n    nickname: \"\",\n    message: \"\",\n    date: \"\",\n    type: \"\"\n  });\n  const history = useHistory();\n  const {\n    room\n  } = useParams();\n  useEffect(() => {\n    const fetchData = async () => {\n      setNickname(localStorage.getItem(\"nickName\"));\n      setRoomname(room);\n      firebase.database().ref(\"chats/\").orderByChild(\"roomname\").equalTo(roomname).on(\"value\", resp => {\n        setChats([]);\n        setChats(snapshotToArray(resp));\n      });\n    };\n\n    console.log(Players);\n    fetchData();\n  }, [room, roomname]);\n  useEffect(() => {\n    const fetchData = async () => {\n      setNickname(localStorage.getItem(\"nickName\"));\n      setRoomname(room);\n      firebase.database().ref(\"roomusers/\").orderByChild(\"roomname\").equalTo(roomname).on(\"value\", resp2 => {\n        setUsers([]);\n        const roomusers = snapshotToArray(resp2);\n        setUsers(roomusers.filter(x => x.status === \"online\"));\n      });\n    };\n\n    fetchData();\n  }, [room, roomname]);\n\n  const snapshotToArray = snapshot => {\n    const returnArr = [];\n    snapshot.forEach(childSnapshot => {\n      const item = childSnapshot.val();\n      item.key = childSnapshot.key;\n      returnArr.push(item);\n    });\n    return returnArr;\n  };\n\n  const submitMessage = e => {\n    e.preventDefault();\n    const chat = newchat;\n    chat.roomname = roomname;\n    chat.nickname = nickname;\n    chat.date = Moment(new Date()).format(\"DD/MM/YYYY HH:mm:ss\");\n    chat.type = \"message\";\n    const newMessage = firebase.database().ref(\"chats/\").push();\n    newMessage.set(chat);\n    setNewchat({\n      roomname: \"\",\n      nickname: \"\",\n      message: \"\",\n      date: \"\",\n      type: \"\"\n    });\n  };\n\n  const exitChat = e => {\n    const chat = {\n      roomname: \"\",\n      nickname: \"\",\n      message: \"\",\n      date: \"\",\n      type: \"\"\n    };\n    chat.roomname = roomname;\n    chat.nickname = nickname;\n    chat.date = Moment(new Date()).format(\"DD/MM/YYYY HH:mm:ss\");\n    chat.message = `${nickname} leave the room`;\n    chat.type = \"exit\";\n    const newMessage = firebase.database().ref(\"chats/\").push();\n    newMessage.set(chat);\n    firebase.database().ref(\"roomusers/\").orderByChild(\"roomname\").equalTo(roomname).once(\"value\", resp => {\n      let roomuser = [];\n      roomuser = snapshotToArray(resp);\n      const user = roomuser.find(x => x.nickname === nickname);\n\n      if (user !== undefined) {\n        const userRef = firebase.database().ref(\"roomusers/\" + user.key);\n        userRef.update({\n          status: \"offline\"\n        });\n      }\n    });\n    history.goBack();\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: \"Container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AppBar, {\n    position: \"static\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    className: classes.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }, \"Welcome \", nickname, \" to IPL Auction Presented by DORA\"), /*#__PURE__*/React.createElement(Button, {\n    color: \"inherit\",\n    onClick: exitChat,\n    endIcon: /*#__PURE__*/React.createElement(ExitToAppIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 63\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  }, \"Leave Room\"))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: \"8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ScrollToBottom, {\n    className: \"ChatContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }\n  }, chats.map((item, idx) => /*#__PURE__*/React.createElement(\"div\", {\n    key: idx,\n    className: \"MessageBox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 21\n    }\n  }, item.type === \"join\" || item.type === \"exit\" ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ChatStatus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"ChatDate\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 27\n    }\n  }, item.date), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"ChatContentCenter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 27\n    }\n  }, item.message)) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ChatMessage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `${item.nickname === nickname ? \"RightBubble\" : \"LeftBubble\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 27\n    }\n  }, item.nickname === nickname ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"MsgName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 31\n    }\n  }, \"Me\") : /*#__PURE__*/React.createElement(\"span\", {\n    className: \"MsgName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 31\n    }\n  }, item.nickname), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"MsgDate\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 29\n    }\n  }, \" at \", item.date), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 29\n    }\n  }, item.message)))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    placeholder: \"Type Message\",\n    fullWidth: true,\n    variant: \"outlined\",\n    size: \"small\",\n    required: true,\n    InputLabelProps: {\n      shrink: true\n    },\n    value: newchat.message,\n    onChange: e => {\n      e.persist();\n      setNewchat({ ...newchat,\n        message: e.target.value\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(IconButton, {\n    className: classes.submitButton,\n    color: \"primary\",\n    onClick: submitMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(SendIcon, {\n    fontSize: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(Col, {\n    xs: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 17\n    }\n  }, users.map((item, idx) => /*#__PURE__*/React.createElement(Card, {\n    key: idx,\n    className: \"UsersCard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(CardSubtitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 25\n    }\n  }, item.nickname))))))))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(ChatRoom, \"3MCyjLT9aaICTx2uY1vkaFi8YtE=\", false, function () {\n  return [useStyles, useHistory, useParams];\n});\n\n_c = ChatRoom;\nexport default ChatRoom;\n/*<Form className=\"MessageForm\" onSubmit={submitMessage}>\n                    <InputGroup>\n                      <Input\n                        type=\"text\"\n                        name=\"message\"\n                        id=\"message\"\n                        placeholder=\"Enter message here\"\n                        value={newchat.message}\n                        onChange={onChange}\n                      />\n                      <InputGroupAddon addonType=\"append\">\n                        <Button variant=\"primary\" type=\"submit\">\n                          Send\n                        </Button>\n                      </InputGroupAddon>\n                    </InputGroup>\n                  </Form>*/\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["/home/proxin/React/react-js-chat-webapp-example/src/components/MainScreen/ChatRoom/ChatRoom.js"],"names":["React","useState","useEffect","useHistory","useParams","Players","Typography","TextField","IconButton","CircularProgress","Container","Paper","Grid","AppBar","Toolbar","Button","ExitToAppIcon","Row","Col","Card","CardBody","CardSubtitle","Form","InputGroup","Input","InputGroupAddon","Moment","firebase","ScrollToBottom","SendIcon","useStyles","ChatRoom","classes","chats","setChats","users","setUsers","nickname","setNickname","roomname","setRoomname","newchat","setNewchat","message","date","type","history","room","fetchData","localStorage","getItem","database","ref","orderByChild","equalTo","on","resp","snapshotToArray","console","log","resp2","roomusers","filter","x","status","snapshot","returnArr","forEach","childSnapshot","item","val","key","push","submitMessage","e","preventDefault","chat","Date","format","newMessage","set","exitChat","once","roomuser","user","find","undefined","userRef","update","goBack","title","map","idx","sendMessage","shrink","persist","target","value","submitButton"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {Players} from \"../../../Players\"\nimport {\n  Typography,\n  TextField,\n  IconButton,\n  CircularProgress,\n  Container,\n  Paper,\n  Grid,\n  AppBar,\n  Toolbar,\n  Button\n} from \"@material-ui/core\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport {\n  Row,\n  Col,\n  Card,\n  CardBody,\n  CardSubtitle,\n  Form,\n  InputGroup,\n  Input,\n  InputGroupAddon,\n} from \"reactstrap\";\nimport Moment from \"moment\";\nimport firebase from \"../../../Firebase\";\nimport ScrollToBottom from \"react-scroll-to-bottom\";\nimport SendIcon from '@material-ui/icons/Send';\n\nimport useStyles from \"./ChatRoom.styles\";\nimport '../../../Styles.css';\n\nfunction ChatRoom() {\n    const classes = useStyles();\n  const [chats, setChats] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [nickname, setNickname] = useState(\"\");\n  const [roomname, setRoomname] = useState(\"\");\n  const [newchat, setNewchat] = useState({\n    roomname: \"\",\n    nickname: \"\",\n    message: \"\",\n    date: \"\",\n    type: \"\",\n  });\n  const history = useHistory();\n  const { room } = useParams();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setNickname(localStorage.getItem(\"nickName\"));\n      setRoomname(room);\n      firebase\n        .database()\n        .ref(\"chats/\")\n        .orderByChild(\"roomname\")\n        .equalTo(roomname)\n        .on(\"value\", (resp) => {\n          setChats([]);\n          setChats(snapshotToArray(resp));\n        });\n    };\n    console.log(Players);\n    fetchData();\n  }, [room, roomname]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setNickname(localStorage.getItem(\"nickName\"));\n      setRoomname(room);\n      firebase\n        .database()\n        .ref(\"roomusers/\")\n        .orderByChild(\"roomname\")\n        .equalTo(roomname)\n        .on(\"value\", (resp2) => {\n          setUsers([]);\n          const roomusers = snapshotToArray(resp2);\n          setUsers(roomusers.filter((x) => x.status === \"online\"));\n        });\n    };\n\n    fetchData();\n  }, [room, roomname]);\n\n  const snapshotToArray = (snapshot) => {\n    const returnArr = [];\n\n    snapshot.forEach((childSnapshot) => {\n      const item = childSnapshot.val();\n      item.key = childSnapshot.key;\n      returnArr.push(item);\n    });\n\n    return returnArr;\n  };\n\n  const submitMessage = (e) => {\n    e.preventDefault();\n    const chat = newchat;\n    chat.roomname = roomname;\n    chat.nickname = nickname;\n    chat.date = Moment(new Date()).format(\"DD/MM/YYYY HH:mm:ss\");\n    chat.type = \"message\";\n    const newMessage = firebase.database().ref(\"chats/\").push();\n    newMessage.set(chat);\n    setNewchat({ roomname: \"\", nickname: \"\", message: \"\", date: \"\", type: \"\" });\n  };\n\n  const exitChat = (e) => {\n    const chat = {\n      roomname: \"\",\n      nickname: \"\",\n      message: \"\",\n      date: \"\",\n      type: \"\",\n    };\n    chat.roomname = roomname;\n    chat.nickname = nickname;\n    chat.date = Moment(new Date()).format(\"DD/MM/YYYY HH:mm:ss\");\n    chat.message = `${nickname} leave the room`;\n    chat.type = \"exit\";\n    const newMessage = firebase.database().ref(\"chats/\").push();\n    newMessage.set(chat);\n\n    firebase\n      .database()\n      .ref(\"roomusers/\")\n      .orderByChild(\"roomname\")\n      .equalTo(roomname)\n      .once(\"value\", (resp) => {\n        let roomuser = [];\n        roomuser = snapshotToArray(resp);\n        const user = roomuser.find((x) => x.nickname === nickname);\n        if (user !== undefined) {\n          const userRef = firebase.database().ref(\"roomusers/\" + user.key);\n          userRef.update({ status: \"offline\" });\n        }\n      });\n\n    history.goBack();\n  };\n\n  return (\n    <Grid container className=\"Container\">\n    <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Welcome {nickname} to IPL Auction Presented by DORA\n          </Typography>\n          <Button color=\"inherit\" onClick={exitChat} endIcon={<ExitToAppIcon/>}>\n            Leave Room\n          </Button>\n        </Toolbar>\n      </AppBar>\n      <Grid item xs={6}>\n        <div className=\"Container\">\n          <Container>\n          <Paper>\n            <Row>\n              <Col xs=\"8\">\n                <ScrollToBottom className=\"ChatContent\">\n                  {chats.map((item, idx) => (\n                    <div key={idx} className=\"MessageBox\">\n                      {item.type === \"join\" || item.type === \"exit\" ? (\n                        <div className=\"ChatStatus\">\n                          <span className=\"ChatDate\">{item.date}</span>\n                          <span className=\"ChatContentCenter\">\n                            {item.message}\n                          </span>\n                        </div>\n                      ) : (\n                        <div className=\"ChatMessage\">\n                          <div\n                            className={`${\n                              item.nickname === nickname\n                                ? \"RightBubble\"\n                                : \"LeftBubble\"\n                            }`}\n                          >\n                            {item.nickname === nickname ? (\n                              <span className=\"MsgName\">Me</span>\n                            ) : (\n                              <span className=\"MsgName\">{item.nickname}</span>\n                            )}\n                            <span className=\"MsgDate\"> at {item.date}</span>\n                            <p>{item.message}</p>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </ScrollToBottom>\n                <div className={classes.sendMessage}>\n                  <TextField\n                    placeholder=\"Type Message\"\n                    fullWidth\n                    variant=\"outlined\"\n                    size='small'\n                    required={true}\n                    InputLabelProps={{ shrink: true }}\n                    value={newchat.message}\n                    onChange={(e) => {\n                      e.persist();\n                      setNewchat({\n                        ...newchat,\n                        message: e.target.value,\n                      });\n                    }}\n                  />\n                  <IconButton\n              className={classes.submitButton}\n              color=\"primary\"\n              onClick={submitMessage}\n            >\n              <SendIcon fontSize=\"large\" />\n            </IconButton>\n                </div>\n              </Col>\n              <Col xs=\"4\">\n                <div>\n                  {users.map((item, idx) => (\n                    <Card key={idx} className=\"UsersCard\">\n                      <CardBody>\n                        <CardSubtitle>{item.nickname}</CardSubtitle>\n                      </CardBody>\n                    </Card>\n                  ))}\n                </div>\n              </Col>\n            </Row>\n            </Paper>\n          </Container>\n        </div>\n      </Grid>\n      <Grid item xs={6}>\n                    \n      </Grid>\n    </Grid>\n  );\n}\n\nexport default ChatRoom;\n\n/*<Form className=\"MessageForm\" onSubmit={submitMessage}>\n                    <InputGroup>\n                      <Input\n                        type=\"text\"\n                        name=\"message\"\n                        id=\"message\"\n                        placeholder=\"Enter message here\"\n                        value={newchat.message}\n                        onChange={onChange}\n                      />\n                      <InputGroupAddon addonType=\"append\">\n                        <Button variant=\"primary\" type=\"submit\">\n                          Send\n                        </Button>\n                      </InputGroupAddon>\n                    </InputGroup>\n                  </Form>*/\n"]},"metadata":{},"sourceType":"module"}